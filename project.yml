name: Samidare-iOS
packages:
  Firebase:
    url: https://github.com/firebase/firebase-ios-sdk.git
    minorVersion: 8.9.1
  Realm:
    url: https://github.com/realm/realm-cocoa.git
    minorVersion: 10.28.2
  swift-snapshot-testing:
    url: https://github.com/pointfreeco/swift-snapshot-testing.git
    minorVersion: 1.9.0
options:
  deploymentTarget:
    iOS: 15.0
configs:
  StubDebug: debug
  Stub: release
  DevelopDebug: debug
  Develop: release
  StagingDebug: debug
  Staging: release
  ReleaseDebug: debug
  Release: release
settings:
  configs:
    StubDebug:
      OTHER_SWIFT_FLAGS:
        - -D
        - STUB
    Stub:
      OTHER_SWIFT_FLAGS:
        - -D
        - STUB
      SWIFT_OPTIMIZATION_LEVEL:
        - -Onone
      GCC_OPTIMIZATION_LEVEL:
        - 0
    DevelopDebug:
      OTHER_SWIFT_FLAGS:
        - -D
        - DEVELOP
    Develop:
      OTHER_SWIFT_FLAGS:
        - -D
        - DEVELOP
      SWIFT_OPTIMIZATION_LEVEL:
        - -Onone
      GCC_OPTIMIZATION_LEVEL:
        - 0
    StagingDebug:
      OTHER_SWIFT_FLAGS:
        - -D
        - STAGING
    Staging:
      OTHER_SWIFT_FLAGS:
        - -D
        - STAGING
    ReleaseDebug:
      OTHER_SWIFT_FLAGS:
        - -D
        - RELEASE
    Release:
      OTHER_SWIFT_FLAGS:
        - -D
        - RELEASE
schemes:
  Samidare-Stub:
    build:
      targets:
        Samidare-iOS: all
        Samidare-iOSTests: [test]
        Samidare-iOSUITests: [test]
    run:
      config: StubDebug
    test:
      config: StubDebug
      gatherCoverageData: true
      coverageTargets:
        - Samidare-iOS
      targets: [Samidare-iOSTests]
      environmentVariables:
        - variable: isUnitTest
          value: "true"
          isEnabled: true
    profile:
      config: Stub
    analyze:
      config: Stub
    archive:
      config: Stub
  Samidare-Develop:
    build:
      targets:
        Samidare-iOS: [analyze, run, archive]
    run:
      config: DevelopDebug
    test:
      config: DevelopDebug
      gatherCoverageData: true
      coverageTargets:
        - Samidare-iOS
      targets: [Samidare-iOSTests]
      environmentVariables:
        - variable: isUnitTest
          value: "true"
          isEnabled: true
    profile:
      config: Develop
    analyze:
      config: Develop
    archive:
      config: Develop
  Samidare-Staging:
    build:
      targets:
        Samidare-iOS: [analyze, run, archive]
    run:
      config: StagingDebug
    test:
      config: StagingDebug
      gatherCoverageData: true
      coverageTargets:
        - Samidare-iOS
      targets: [Samidare-iOSTests]
      environmentVariables:
        - variable: isUnitTest
          value: "true"
          isEnabled: true
    profile:
      config: Staging
    analyze:
      config: Staging
    archive:
      config: Staging
  Samidare-Release:
    build:
      targets:
        Samidare-iOS: [analyze, run, archive]
    run:
      config: ReleaseDebug
    test:
      config: ReleaseDebug
      gatherCoverageData: true
      coverageTargets:
        - Samidare-iOS
      targets: [Samidare-iOSTests]
      environmentVariables:
        - variable: isUnitTest
          value: "true"
          isEnabled: true
    profile:
      config: Release
    analyze:
      config: Release
    archive:
      config: Release
targets:
  Samidare-iOS:
    info:
      path: Samidare-iOS/Info.plist
      properties:
        UISupportedInterfaceOrientations: [UIInterfaceOrientationPortrait, UIInterfaceOrientationLandscapeLeft, UIInterfaceOrientationLandscapeRight]
        UISupportedInterfaceOrientations~ipad: [UIInterfaceOrientationPortrait, UIInterfaceOrientationPortraitUpsideDown, UIInterfaceOrientationLandscapeLeft, UIInterfaceOrientationLandscapeRight]
        UIApplicationSupportsIndirectInputEvents: true
        LSRequiresIPhoneOS: true
        UILaunchScreen: 
          UILaunchScreen:
        UIApplicationSceneManifest:
          UIApplicationSupportsMultipleScenes: true
    type: application
    platform: iOS
    sources:
      - path: Samidare-iOS
        excludes:
          - "**/.gitkeep"
          - README.md
      - path: Samidare-iOS/README.md
        buildPhase: none
    dependencies:
      - package: Firebase
        product: FirebaseAnalytics
      - package: Firebase
        product: FirebaseFirestore
      - package: Firebase
        product: FirebaseCrashlytics
      - package: Firebase
        product: FirebaseFirestoreSwift-Beta
      - package: Realm
        product: Realm
      - package: Realm
        product: RealmSwift
    settings:
      base:
        TARGETED_DEVICE_FAMILY: 1
      configs:
        StubDebug:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        Stub:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        DevelopDebug:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        Develop:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        StagingDebug:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        Staging:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        ReleaseDebug:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
        Release:
          PRODUCT_BUNDLE_IDENTIFIER: com.sugiokaseiya.Samidare-iOS
    preBuildScripts:
      - name: SwiftGen
        script: |
          if test -d /opt/homebrew/bin; then
            PATH=/opt/homebrew/bin/:$PATH
          fi

          if which mint >/dev/null; then
            mint run swiftgen config run --config ${PROJECT_DIR}/swiftgen.yml
          else
            echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
          fi
        outputFiles:
          - $(SRCROOT)/Samidare-iOS/Generated/Localized.swift
          - $(SRCROOT)/Samidare-iOS/Generated/Images.swift
    postCompileScripts:
      - name: Firebase
        script: |
          if [ "${CONFIGURATION}" == "Release" ]; then
            cp "${PROJECT_DIR}/${PROJECT_NAME}/Resource/Firebase/GoogleService-Info-Release.plist" "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist"
          else
            cp "${PROJECT_DIR}/${PROJECT_NAME}/Resource/Firebase/GoogleService-Info-Debug.plist" "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.app/GoogleService-Info.plist"
          fi
      - name: SwiftLint
        script: |
          if test -d /opt/homebrew/bin; then
            PATH=/opt/homebrew/bin/:$PATH
          fi

          if which mint >/dev/null; then
            mint run swiftlint
          else
            echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
          fi
      - name: Generate Mocks with Mockolo
        script: |
          if test -d /opt/homebrew/bin; then
            PATH=/opt/homebrew/bin/:$PATH
          fi

          if which mint >/dev/null; then
            rm -f ${PROJECT_DIR}/Samidare-iOSTests/MockResults.swift
            xcrun --sdk macosx mint run mockolo mockolo --testable-imports Samidare_iOS --sourcedirs ${PROJECT_DIR} --destination ${PROJECT_DIR}/Samidare-iOSTests/MockResults.swift
          else
            echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
          fi
        outputFiles:
          - ${PROJECT_DIR}/Samidare-iOSTests/MockResults.swift
  Samidare-iOSTests:
    info:
      path: Samidare-iOSTests/Info.plist
    type: bundle.unit-test
    platform: iOS
    sources:
      - path: Samidare-iOSTests
        createIntermediateGroups: true
      - path: Samidare-iOSTests/MockResults.swift
        optional: true
    dependencies:
      - target: Samidare-iOS
      - package: swift-snapshot-testing
        product: SnapshotTesting
  Samidare-iOSUITests:
    info:
      path: Samidare-iOSUITests/Info.plist
    type: bundle.ui-testing
    platform: iOS
    sources:
      - path: Samidare-iOSUITests
        createIntermediateGroups: true
    dependencies:
      - target: Samidare-iOS
